"""Module contains SimulationWidget class."""

from tkinter import Frame, Button
from aiview import AIView
from aiscene import AIScene
from game import Game


class SimulationWidget(Frame):
    """
    Displays simulation of controller behavior.

    SimulationWodget has to windows. Top window shows game field,
    and game object under control of given controller.
    Bottom window shows neurons and connections inside controller.
    """

    def __init__(self, master, controller):
        """Create new SimulationWidget."""
        Frame.__init__(self, master)

        self._running = False

        control_frame = Frame(self)
        self._button = Button(
            master=control_frame,
            text="Start simutation",
            command=self._start,
        )
        self._button.pack(side='left')

        Button(control_frame, text="Import").pack(side='left')
        Button(control_frame, text="Export").pack(side='left')
        control_frame.pack()

        self._controller = controller
        self._game = Game()
        self._game_scene = AIScene(self)
        self._game_scene.draw(self._game)
        self._game_scene.pack(fill='both', expand=True)

        self._ai_view = AIView(self)
        self._ai_view.set_contorller(self._controller)
        self._ai_view.pack(fill='both', expand=True)

    def set_controller_callback(self, event):
        """
        Set controller by event.

        Callback method. Event must be generated by widget,
        capable of getting controller by selected_controller method.
        """
        controller = event.widget.selected_controller()
        self.set_controller(controller)

    def set_controller(self, controller):
        """Set controller directly."""
        simulation_state = self._running
        self.stop()

        self._controller = controller
        self._ai_view.set_contorller(controller)
        self.reset()

        if simulation_state:
            self._start()

    def update(self):
        """Update situation in both windows."""
        if not self._running:
            return

        self._game.update(self._controller.direction)
        self._controller.percive(self._game)
        if self._game.is_lost:
            self._controller.reset()
            self.reset()
        else:
            self._ai_view.update()
            self._game_scene.redraw(self._game, self._controller)
            self._controller.update()

    def reset(self):
        """Reset widget to default state."""
        self.stop()
        self._game.restart()
        self._game_scene.clear()
        self._game_scene.draw(self._game)

    def stop(self, _=None):
        """Stop simulation."""
        self._button.configure(
            text="Start simulation",
            command=self._start
        )
        self._running = False

    def _start(self):
        self._button.configure(
            text="Stop simulation",
            command=self.stop
        )
        self._running = True
